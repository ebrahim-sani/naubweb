// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASEURL")
  // url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  // directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  // shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Student {
  id                    String  @id @default(uuid())
  matricNumber          String  @unique
  firstName             String
  lastName              String
  otherName             String?
  isStudent             Boolean @default(true)
  department            String
  programme             String
  faculty               String
  modeOfEntry           String
  level                 String
  profilePicture        String
  gender                String
  dateOfBirth           String
  email                 String  @unique
  phoneNumber           String  @unique
  country               String
  state                 String
  lga                   String
  address               String
  town                  String
  maritalStatus         String
  religion              String
  hairColor             String
  tribe                 String
  tribalMark            String
  bloodGroup            String
  genotype              String?
  password              String
  nextOfKinFirstName    String
  nextOfKinLastName     String
  nextOfKinPhoneNumber  String
  nextOfKinRelationship String
  nextOfKinAddress      String

  coursesRegistered registerCourse[]
  courseResults     CourseResult[]

  @@unique([matricNumber, email])
  @@index([matricNumber])
}

model registerCourse {
  id                String                @id @default(uuid())
  registeredTime    DateTime              @default(now())
  studentRegistered Student?              @relation(fields: [studentId], references: [id])
  studentId         String?
  semester          String
  session           String
  level             String
  courses           CourseRegisteration[]
}

model CourseRegisteration {
  id               String
  specialId        String          @unique @default(uuid())
  courseCode       String
  courseTitle      String
  department       String
  level            String
  unit             String
  courseStatus     String
  preReq           String?
  registerCourse   registerCourse? @relation(fields: [registerCourseId], references: [id])
  registerCourseId String
}

model Course {
  id               String      @id @default(uuid())
  courseCode       String      @unique
  courseTitle      String      @unique
  department       String
  level            String
  unit             String
  courseStatus     String
  preReq           String?
  departmentCourse Department? @relation(fields: [departmentId], references: [id])
  departmentId     String?

  @@index([courseTitle, courseCode])
}

model Department {
  id             String   @id @default(uuid())
  departmentName String   @unique
  faculty        String
  profilePicture String?
  password       String
  CoursesCreated Course[]
  isDepartment   Boolean  @default(true)

  @@unique([departmentName, faculty])
  @@index([departmentName])
}

// department will create a result for each and every course with a targeted matricNumber, so that 
// that Student will get the result into their profile instantly.

model CourseResult {
  id                  String    @id @default(uuid())
  courseName          String
  courseCode          String
  studentMatricNumber String
  remark              String
  Lecturer            Lecturer? @relation(fields: [lecturerId], references: [id])
  lecturerId          String?
  Student             Student?  @relation(fields: [matricNumber], references: [id])
  matricNumber        String?

  @@unique([studentMatricNumber])
}

model Lecturer {
  id             String  @id @default(uuid())
  staffId        String  @unique
  firstName      String
  lastName       String
  otherName      String?
  isLecturer     Boolean @default(true)
  faculty        String
  profilePicture String?
  gender         String
  dateOfBirth    String
  email          String  @unique
  phoneNumber    String  @unique
  country        String
  state          String
  lga            String
  address        String
  town           String
  maritalStatus  String
  religion       String
  hairColor      String
  tribe          String
  tribalMark     String
  bloodGroup     String
  genotype       String?
  password       String

  studentsResultMarked CourseResult[]

  @@unique([staffId, email])
  @@index([staffId, firstName, email])
}
